# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:

#  server:
#    hostname: Delivery_Tracking
#    container_name: Delivery_Tracking
#    build:
#      context: .
#    ports:
#      - 8080:8080
#
#
  sonarqube:
    image: sonarqube:latest
    hostname: sonarqube
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      SONAR_JDBC_URL: "jdbc:postgresql://db:5432/sonarqube"
      SONAR_JDBC_USERNAME: "sonar"
      SONAR_JDBC_PASSWORD: "sonar"
    depends_on:
      db:
        condition: service_healthy

  jenkins:
    image: jenkins/jenkins:latest
    container_name: jenkins
    ports:
      - "8080:8080"
    volumes:
      - ./jenkins_home:/var/jenkins_home
    environment:
      JAVA_OPTS: "-Djenkins.install.runSetupWizard=false"

  db:
    hostname: db
    container_name: db
    image: postgres:latest
    restart: always
    user: root
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonarqube
    volumes:
      - ./db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "sonar" ]
      interval: 10s
      timeout: 5s
      retries: 5



volumes:
  jenkins_home:
  db_data:
